<?php
	<%@import('include/head.comment.otpl',$)%>

	namespace <%$.service.namespace%>;

	use Gobl\CRUD\Exceptions\CRUDException;
	use Gobl\DBAL\Relations\Relation;
	use Gobl\DBAL\Types\Exceptions\TypesInvalidValueException;
	use Gobl\ORM\Exceptions\ORMControllerFormException;
	use Gobl\ORM\Exceptions\ORMQueryException;
	use Gobl\ORM\Exceptions\ORMException;
	use Gobl\ORM\ORM;
	use Gobl\ORM\ORMServiceBase;
	use <%$.namespace%>\<%$.class.controller%>;
	use <%$.namespace%>\<%$.class.entity%>;
	use OZONE\OZ\Core\RequestHandler;
	use OZONE\OZ\Core\URIHelper;
	use OZONE\OZ\Exceptions\BadRequestException;
	use OZONE\OZ\Exceptions\ForbiddenException;
	use OZONE\OZ\Exceptions\InvalidFieldException;
	use OZONE\OZ\Exceptions\InvalidFormException;
	use OZONE\OZ\Exceptions\MethodNotAllowedException;
	use OZONE\OZ\Exceptions\NotFoundException;

	defined('OZ_SELF_SECURITY_CHECK') or die;

	/**
	 * Class <%$.service.class%>
	 *
	 * to add item to <%$.service.name%>
	 * - POST    /<%$.service.name%>
	 *
	 * to update property(ies) of the item with the given :<%$.pk_columns[0].name%>
	 * - PUT     /<%$.service.name%>/:<%$.pk_columns[0].name%>
	 *
	 * to delete item with the given :<%$.pk_columns[0].name%>
	 * - DELETE  /<%$.service.name%>/:<%$.pk_columns[0].name%>
	 *
	 * to delete all items in `<%$.table.name%>`
	 * - DELETE  /<%$.service.name%>
	 *
	 * to get the item with the given :<%$.pk_columns[0].name%>
	 * - GET     /<%$.service.name%>/:<%$.pk_columns[0].name%>
	 *
	 * to get all items in <%$.table.name%>
	 * - GET     /<%$.service.name%>
	 *
	 * to get item(s) from relation for the item in `<%$.table.name%>` with the given :<%$.pk_columns[0].name%>
	 * - GET     /<%$.service.name%>/:<%$.pk_columns[0].name%>/relation
	 *
	 * @package <%$.namespace%>\App\Services
	 */
	final class <%$.service.class%> extends ORMServiceBase
	{
		// for url like /<%$.service.name%>/:<%$.pk_columns[0].name%>
		private static $identified_extra_reg = '#^([a-zA-Z0-9]+)/?$#';

		// for url like /<%$.service.name%>/:<%$.pk_columns[0].name%>/relation
		private static $identified_relation_extra_reg = '#^([a-zA-Z0-9]+)/([a-zA-Z0-9_-]+)/?$#';

		/**
		 * maps form fields name to columns name
		 *
		 * @var array
		 */
		private static $columns_map = [
			<%@import('include/ozone.columns.name.map.otpl',$)%>
		];

		/**
		 * maps relations names list
		 *
		 * @var array
		 */
		private static $relations_map = [
			<%@import('include/ozone.relations.name.map.otpl',$)%>
		];

		/**
		 * Executes the service.
		 *
		 * @param array $request the request parameters
		 *
		 * @throws \Gobl\DBAL\Exceptions\DBALException
		 * @throws \OZONE\OZ\Exceptions\InternalErrorException
		 * @throws \OZONE\OZ\Exceptions\InvalidFieldException
		 * @throws \OZONE\OZ\Exceptions\InvalidFormException
		 * @throws \OZONE\OZ\Exceptions\MethodNotAllowedException
		 * @throws \OZONE\OZ\Exceptions\NotFoundException
		 * @throws \OZONE\OZ\Exceptions\RuntimeException
		 */
		public function execute(array $request = [])
		{
			// uncomment the next line to allow administrator only
			// Assert::assertIsAdmin();
			// or uncomment the next line to allow verified user only
			// Assert::assertUserVerified();

			$success = true;
			$error   = null;

			try {
				$this->executeSub($request);
			} catch (ORMException $e) {
				$success = false;
				$error   = $e;
			} catch (TypesInvalidValueException $e) {
				$success = false;
				$error   = $e;
			} catch (CRUDException $e) {
				$success = false;
				$error   = $e;
			}

			if (!$success) {
				$this->tryConvertException($error);
			}
		}

		/**
		 * Converts Gobl exceptions unto OZone exceptions.
		 *
		 * @param \Exception $error the exception
		 *
		 * @throws \Exception
		 * @throws \OZONE\OZ\Exceptions\InvalidFieldException
		 * @throws \OZONE\OZ\Exceptions\InvalidFormException
		 */
		public static function tryConvertException(\Exception $error)
		{
			if ($error instanceof ORMControllerFormException) {
				throw new InvalidFormException(null, [$error->getMessage(), $error->getData()], $error);
			}

			if ($error instanceof ORMQueryException) {
				throw new BadRequestException($error->getMessage(), $error->getData(), $error);
			}

			if ($error instanceof CRUDException) {
				throw new ForbiddenException($error->getMessage(), $error->getData(), $error);
			}

			if ($error instanceof TypesInvalidValueException) {
				// don't expose debug data to client, may contains sensitive data
				$debug         = $error->getDebugData();
				$data          = $error->getData();
				$data["field"] = $debug["field"];

				throw new InvalidFieldException($error->getMessage(), $data, $error);
			}

			throw $error;
		}

		/**
		 * Checks for request extra.
		 *
		 * @return bool
		 */
		private function noExtra()
		{
			return empty(URIHelper::getUriExtra());
		}

		/**
		 * Execute request with REST API in minds.
		 *
		 * @param array $request
		 *
		 * @throws \Gobl\DBAL\Exceptions\DBALException
		 * @throws \Gobl\DBAL\Types\Exceptions\TypesInvalidValueException
		 * @throws \Gobl\ORM\Exceptions\ORMControllerFormException
		 * @throws \Gobl\ORM\Exceptions\ORMException
		 * @throws \OZONE\OZ\Exceptions\InternalErrorException
		 * @throws \OZONE\OZ\Exceptions\InvalidFormException
		 * @throws \OZONE\OZ\Exceptions\MethodNotAllowedException
		 * @throws \OZONE\OZ\Exceptions\NotFoundException
		 * @throws \OZONE\OZ\Exceptions\RuntimeException
		 * @throws \Gobl\CRUD\Exceptions\CRUDException
		 */
		private function executeSub(array $request)
		{
			if ($this->noExtra()) {
				if (RequestHandler::isPost()) {
					$this->actionCreateEntity($request);
				} elseif (RequestHandler::isDelete()) {
					$this->actionDeleteAll($request);
				} elseif (RequestHandler::isGet()) {
					$this->actionGetAll($request);
				} elseif (RequestHandler::isPatch()) {
					$this->actionUpdateAll($request);
				} else {
					throw new MethodNotAllowedException();
				}
			} elseif ($extra = $this->getIdentifiedExtra()) {
				if (RequestHandler::isDelete()) {
					$this->actionDeleteEntity($extra);
				} elseif (RequestHandler::isGet()) {
					$this->actionGetEntity($request, $extra);
				} elseif (RequestHandler::isPatch()) {
					$this->actionUpdateEntity($request, $extra);
				} else {
					throw new MethodNotAllowedException();
				}
			} elseif ($extra = $this->getIdentifiedRelationExtra()) {
				if (RequestHandler::isPost()) {
					$this->actionAddRelation($request, $extra);
				} elseif (RequestHandler::isDelete()) {
					$this->actionDeleteRelation($request, $extra);
				} elseif (RequestHandler::isGet()) {
					$this->actionGetRelation($request, $extra);
				} elseif (RequestHandler::isPatch()) {
					$this->actionUpdateRelation($request, $extra);
				} else {
					throw new MethodNotAllowedException();
				}
			} else {
				// invalid url
				throw new NotFoundException();
			}
		}

		/**
		 * Gets identified extra.
		 *
		 * @return array|bool
		 */
		private function getIdentifiedExtra()
		{
			$extra_map = [<%$.class.entity%>::<%$.pk_columns[0].const%>];
			$extra     = [];
			$extra_ok  = URIHelper::parseUriExtra(self::$identified_extra_reg, $extra_map, $extra);

			if ($extra_ok) {
				return $extra;
			}

			return false;
		}

		/**
		 * Gets identified relation extra.
		 *
		 * @return array|bool
		 */
		private function getIdentifiedRelationExtra()
		{
			$extra_map = [<%$.class.entity%>::<%$.pk_columns[0].const%>, 'relation'];
			$extra     = [];
			$extra_ok  = URIHelper::parseUriExtra(self::$identified_relation_extra_reg, $extra_map, $extra);

			if ($extra_ok) {
				return $extra;
			}

			return false;
		}

		//========================================================
		//=	POST REQUEST METHODS
		//========================================================

		/**
		 * @param array $request
		 *
		 * @throws \Gobl\DBAL\Exceptions\DBALException
		 * @throws \Gobl\DBAL\Types\Exceptions\TypesInvalidValueException
		 * @throws \Gobl\ORM\Exceptions\ORMControllerFormException
		 * @throws \Gobl\ORM\Exceptions\ORMException
		 * @throws \Exception
		 */
		public function actionCreateEntity(array $request)
		{
			$form_values = self::onlyColumns(self::$columns_map, $request);

			$controller = new <%$.class.controller%>();
			$entity     = $controller->addItem($form_values);

			$this->getResponseHolder()
				 ->setDone($controller->getCrud()->getMessage())
				 ->setData(['item' => $entity]);
		}

		/**
		 * @param array $request
		 * @param array $extra
		 */
		public function actionAddRelation(array $request, array $extra)
		{
			// TODO
		}

		//========================================================
		//=	PATCH REQUEST METHODS
		//========================================================

		/**
		 * @param array $request
		 * @param array $extra
		 *
		 * @throws \Gobl\DBAL\Exceptions\DBALException
		 * @throws \Gobl\DBAL\Types\Exceptions\TypesInvalidValueException
		 * @throws \Gobl\ORM\Exceptions\ORMControllerFormException
		 * @throws \Gobl\ORM\Exceptions\ORMException
		 * @throws \OZONE\OZ\Exceptions\NotFoundException
		 * @throws \Gobl\CRUD\Exceptions\CRUDException
		 * @throws \Exception
		 */
		public function actionUpdateEntity(array $request, array $extra)
		{
			$form_values = self::onlyColumns(self::$columns_map, $request);

			$controller = new <%$.class.controller%>();
			$entity     = $controller->updateOneItem($extra, $form_values);

			if ($entity instanceof <%$.class.entity%>) {
				$this->getResponseHolder()
					 ->setDone($controller->getCrud()->getMessage())
					 ->setData(['item' => $entity]);
			} else {
				throw new NotFoundException();
			}
		}

		/**
		 * @param array $request
		 *
		 * @throws \Gobl\DBAL\Exceptions\DBALException
		 * @throws \Gobl\ORM\Exceptions\ORMControllerFormException
		 * @throws \Gobl\ORM\Exceptions\ORMException
		 * @throws \OZONE\OZ\Exceptions\InvalidFormException
		 * @throws \Gobl\CRUD\Exceptions\CRUDException
		 * @throws \Exception
		 */
		public function actionUpdateAll($request = [])
		{
			$data        = (isset($request["data"]) AND is_array($request["data"])) ? $request["data"] : [];
			$form_values = self::onlyColumns(self::$columns_map, $data);

			if (empty($form_values)) {
				throw new InvalidFormException();
			}

			$filters = self::getRequestFilters(self::$columns_map, $request);

			$controller = new <%$.class.controller%>();
			$count      = $controller->updateAllItems($filters, $data);

			$this->getResponseHolder()
				 ->setDone($controller->getCrud()->getMessage())
				 ->setData(['affected' => $count]);
		}

		/**
		 * @param array $request
		 * @param array $extra
		 */
		public function actionUpdateRelation(array $request, array $extra)
		{
			// TODO
		}

		//========================================================
		//=	DELETE REQUEST METHODS
		//========================================================

		/**
		 * @param array $extra
		 *
		 * @throws \Gobl\DBAL\Exceptions\DBALException
		 * @throws \Gobl\ORM\Exceptions\ORMControllerFormException
		 * @throws \Gobl\ORM\Exceptions\ORMException
		 * @throws \OZONE\OZ\Exceptions\NotFoundException
		 * @throws \Gobl\CRUD\Exceptions\CRUDException
		 * @throws \Exception
		 */
		public function actionDeleteEntity(array $extra)
		{

			$controller = new <%$.class.controller%>();
			$entity     = $controller->deleteOneItem($extra);

			if ($entity instanceof <%$.class.entity%>) {
				$this->getResponseHolder()
					 ->setDone($controller->getCrud()->getMessage())
					 ->setData(['item' => $entity]);
			} else {
				throw new NotFoundException();
			}
		}

		/**
		 * @param array $request
		 *
		 * @throws \Gobl\DBAL\Exceptions\DBALException
		 * @throws \Gobl\ORM\Exceptions\ORMControllerFormException
		 * @throws \Gobl\ORM\Exceptions\ORMException
		 * @throws \Gobl\CRUD\Exceptions\CRUDException
		 * @throws \Exception
		 */
		public function actionDeleteAll($request = [])
		{
			$filters = self::onlyColumns(self::$columns_map, $request);

			$controller = new <%$.class.controller%>();
			$count      = $controller->deleteAllItems($filters);

			$this->getResponseHolder()
				 ->setDone($controller->getCrud()->getMessage())
				 ->setData(['affected' => $count]);
		}

		/**
		 * @param array $request
		 * @param array $extra
		 *
		 * @thows \Gobl\DBAL\Exceptions\DBALException
		 */
		public function actionDeleteRelation(array $request, array $extra)
		{
			// TODO
		}

		//========================================================
		//=	GET REQUEST METHODS
		//========================================================

		/**
		 * @param array $request
		 * @param array $extra
		 *
		 * @throws \Gobl\DBAL\Exceptions\DBALException
		 * @throws \Gobl\ORM\Exceptions\ORMControllerFormException
		 * @throws \Gobl\ORM\Exceptions\ORMException
		 * @throws \OZONE\OZ\Exceptions\NotFoundException
		 * @throws \Gobl\CRUD\Exceptions\CRUDException
		 * @throws \Exception
		 */
		public function actionGetEntity(array $request, array $extra)
		{
			$controller = new <%$.class.controller%>();
			$entity     = $controller->getItem($extra);

			if (!$entity) {
				throw new NotFoundException();
			}

			$relations = $this->listEntityRelations($entity, $request);

			$this->getResponseHolder()
				 ->setDone($controller->getCrud()->getMessage())
				 ->setData([
					 'item'      => $entity,
					 'relations' => $relations
				 ]);
		}

		/**
		 * @param array $request
		 *
		 * @throws \Gobl\DBAL\Exceptions\DBALException
		 * @throws \Gobl\ORM\Exceptions\ORMControllerFormException
		 * @throws \Gobl\ORM\Exceptions\ORMException
		 * @throws \Gobl\CRUD\Exceptions\CRUDException
		 * @throws \Exception
		 */
		public function actionGetAll(array $request)
		{
			$filters  = self::getRequestFilters(self::$columns_map, $request);
			$order_by = self::getRequestOrderBy(self::$columns_map, $request);

			$p9            = self::getPagination($request);
			$max           = $p9["max"];
			$offset        = $p9["offset"];
			$page          = $p9["page"];
			$total_records = 0;

			$controller = new <%$.class.controller%>();
			$results    = $controller->getAllItems($filters, $max, $offset, $order_by, $total_records);

			$this->getResponseHolder()
				 ->setDone($controller->getCrud()->getMessage())
				 ->setData([
					 'items' => $results,
					 'max'   => $max,
					 'page'  => $page,
					 'total' => $total_records
				 ]);
		}

		/**
		 * @param array $request
		 * @param array $extra
		 *
		 * @throws \Gobl\CRUD\Exceptions\CRUDException
		 * @throws \Gobl\DBAL\Exceptions\DBALException
		 * @throws \Gobl\ORM\Exceptions\ORMControllerFormException
		 * @throws \Gobl\ORM\Exceptions\ORMException
		 * @throws \OZONE\OZ\Exceptions\NotFoundException
		 */
		public function actionGetRelation(array $request, array $extra)
		{
			if (!isset($extra[<%$.class.entity%>::<%$.pk_columns[0].const%>])) {
				throw new NotFoundException();
			}

			$filters[<%$.class.entity%>::<%$.pk_columns[0].const%>] = $extra[<%$.class.entity%>::<%$.pk_columns[0].const%>];
			$request_relations             = [$extra["relation"]];

			$controller = new <%$.class.controller%>();
			$entity     = $controller->getItem($filters);

			if (!$entity) {
				throw new NotFoundException();
			}

			$rel_map = $this->resolveRelations($request_relations);

			$rel      = $rel_map[$extra["relation"]];
			$rel_type = $rel->getType();

			if ($rel_type === Relation::ONE_TO_MANY OR $rel_type === Relation::MANY_TO_MANY) {
				$results = $this->getRelationItemsList($rel, $entity, $request);
			} else {
				$results = $this->getRelationItem($rel, $entity);
			}

			$this->getResponseHolder()
				 ->setDone()
				 ->setData($results);
		}

		/**
		 * @param \Gobl\DBAL\Relations\Relation $relation
		 * @param \<%$.namespace%>\<%$.class.entity%>    $entity
		 * @param array                         $request
		 *
		 * @return array
		 * @throws \Gobl\ORM\Exceptions\ORMException
		 */
		private function getRelationItemsList(Relation $relation, <%$.class.entity%> $entity, array $request)
		{
			$filters  = self::getRequestFilters(self::$columns_map, $request);
			$order_by = self::getRequestOrderBy(self::$columns_map, $request);

			$relation_columns = $relation->getRelationColumns();
			$entity_data      = $entity->asArray();

			foreach ($relation_columns as $from => $target) {
				$filters[$target] = $entity_data[$from];
			}

			$p9            = self::getPagination($request);
			$max           = $p9["max"];
			$offset        = $p9["offset"];
			$page          = $p9["page"];
			$total_records = 0;

			$relation_getter = $relation->getGetterName();
			$items           = call_user_func_array([
				$entity,
				$relation_getter
			], [$filters, $max, $offset, $order_by, &$total_records]);

			return [
				'item'    => $entity,
				'targets' => $items,
				'max'     => $max,
				'page'    => $page,
				'total'   => $total_records
			];
		}

		/**
		 * @param \Gobl\DBAL\Relations\Relation $relation
		 * @param \<%$.namespace%>\<%$.class.entity%>    $entity
		 *
		 * @return array
		 */
		private function getRelationItem(Relation $relation, <%$.class.entity%> $entity)
		{
			$filters          = [];
			$relation_columns = $relation->getRelationColumns();
			$entity_data      = $entity->asArray();

			foreach ($relation_columns as $from => $target) {
				$filters[$target] = $entity_data[$from];
			}

			$relation_getter = $relation->getGetterName();
			$item            = call_user_func([$entity, $relation_getter]);

			return [
				'item'   => $entity,
				'target' => $item
			];
		}

		/**
		 * @param array $request_relations
		 *
		 * @return \Gobl\DBAL\Relations\Relation[]
		 * @throws \Gobl\ORM\Exceptions\ORMException
		 * @throws \OZONE\OZ\Exceptions\NotFoundException
		 */
		private function resolveRelations(array $request_relations)
		{
			$table   = ORM::getDatabase()->getTable(<%$.class.entity%>::TABLE_NAME);
			$missing = [];
			/**
			 * @var $rel_map Relation[]
			 */
			$rel_map = [];

			// we firstly remove all relation mask
			foreach ($request_relations as $name) {
				if (!isset(self::$relations_map[$name]) OR !$table->hasRelation($name)) {
					$missing[] = $name;
				} else {
					$rel_map[$name] = $table->getRelation($name);
				}
			}

			// check if there are missing relations
			if (count($missing)) {
				throw new NotFoundException(null, ['RELATIONS_MISSING', $missing]);
			}

			return $rel_map;
		}

		/**
		 * @param \<%$.namespace%>\<%$.class.entity%> $entity
		 * @param array                      $request
		 *
		 * @return array
		 * @throws \Gobl\ORM\Exceptions\ORMException
		 * @throws \OZONE\OZ\Exceptions\NotFoundException
		 */
		private function listEntityRelations(<%$.class.entity%> $entity, array $request)
		{
			$request_relations = self::getRequestRelations($request);
			$relations         = [];

			if (!empty($request_relations)) {
				$rel_map = $this->resolveRelations($request_relations);

				// now load each requested relation data
				foreach ($rel_map as $name => $rel) {
					$rel_type = $rel->getType();

					if ($rel_type === Relation::ONE_TO_MANY OR $rel_type === Relation::MANY_TO_MANY) {
						$results    = $this->getRelationItemsList($rel, $entity, $request);
						$rel[$name] = $results['targets'];
					} else {
						$results    = $this->getRelationItem($rel, $entity);
						$rel[$name] = $results['target'];
					}
				}
			}

			return $relations;
		}
	}