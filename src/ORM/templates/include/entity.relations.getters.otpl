<%loop($.relations.list : $relation){%>
<%if($relation.type === 'one-to-one'){%>
        /**
         * OneToOne relation between `<%$relation.host.table.name%>` and `<%$relation.target.table.name%>`.
         *
         * @return null|\<%$relation.target.class.use_entity%>
         */
        public function get<%$relation.methodName%>()
        {
            if (!isset($this->r_<%$relation.name%>)) {
                $m = new <%$relation.target.class.query%>RealR();
                <%loop ($relation.filters : $filter){%>
                $m->filterBy<%$filter.from.methodName%>($this->get<%$filter.to.methodName%>());
                <%}%>
                $this->r_<%$relation.name%> = $m->find()->fetchClass();
            }

            return $this->r_<%$relation.name%>;
        }
<%} else if($relation.type === 'one-to-many'){%>
        /**
         * OneToMany relation between `<%$relation.host.table.name%>` and `<%$relation.target.table.name%>`.
         *
         * @param array    $filters  the row filters
         * @param int|null $max      maximum row to retrieve
         * @param int      $offset   first row offset
         * @param array    $order_by order by rules
         * @param int|bool $total    total rows without limit
         *
         * @return \<%$relation.target.class.use_entity%>[]
         */
        function get<%$relation.methodName%>($filters = [], $max = null, $offset = 0, $order_by = [], &$total = false)
        {
            <%loop ($relation.filters : $filter){%>
            $filters[<%$relation.target.class.entity%>RealR::<%$filter.from.const%>] = $this->get<%$filter.to.methodName%>();<%}%>

            $ctrl = new <%$relation.target.class.controller%>RealR();

            return $ctrl->getAllItems($filters, $max, $offset, $order_by, $total);
        }
<%} else if($relation.type === 'many-to-many'){%>
        /**
         * ManyToMany relation between `<%$relation.host.table.name%>` and `<%$relation.target.table.name%>`.
         *
         * @param array    $filters  the row filters
         * @param int|null $max      maximum row to retrieve
         * @param int      $offset   first row offset
         * @param array    $order_by order by rules
         * @param int|bool $total    total rows without limit
         *
         * @return \<%$relation.target.class.use_entity%>[]
         */
        function get<%$relation.methodName%>($filters = [], $max = null, $offset = 0, $order_by = [], &$total = false)
        {
            <%loop ($relation.filters : $filter){%>
            $filters[<%$relation.target.class.entity%>RealR::<%$filter.from.const%>] = $this->get<%$filter.to.methodName%>();<%}%>

            $ctrl = new <%$relation.target.class.controller%>RealR();

            return $ctrl->getAllItems($filters, $max, $offset, $order_by, $total);
        }
<%} else if($relation.type === 'many-to-one'){%>
        /**
         * ManyToOne relation between `<%$relation.host.table.name%>` and `<%$relation.target.table.name%>`.
         *
         * @return null|\<%$relation.target.class.use_entity%>
         */
        public function get<%$relation.methodName%>()
        {
            if (!isset($this->r_<%$relation.name%>)) {
                $m = new <%$relation.target.class.query%>RealR();
                <%loop ($relation.filters : $filter){%>
                $m->filterBy<%$filter.from.methodName%>($this->get<%$filter.to.methodName%>());
                <%}%>
                $this->r_<%$relation.name%> = $m->find()->fetchClass();
            }

            return $this->r_<%$relation.name%>;
        }
<%}%><%}%>